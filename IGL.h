#pragma once

#include "XPlatform.h"


namespace XPlatform
{
	/////////////////////////////////////////////////////////////////////////////
	// @ 플랫폼 공통 GL 인터페이스.
	/////////////////////////////////////////////////////////////////////////////
	class IGL
	{
	public:
		enum class Boolean
		{
			GL_TRUE = 1,
			GL_FALSE = 0,
		};

		enum class AccumOp
		{
			GL_ACCUM = 0x0100,
			GL_LOAD = 0x0101,
			GL_RETURN = 0x0102,
			GL_MULT = 0x0103,
			GL_ADD = 0x0104,
		};

		enum class AlphaFunction
		{
			GL_NEVER = 0x0200,
			GL_LESS = 0x0201,
			GL_EQUAL = 0x0202,
			GL_LEQUAL = 0x0203,
			GL_GREATER = 0x0204,
			GL_NOTEQUAL = 0x0205,
			GL_GEQUAL = 0x0206,
			GL_ALWAYS = 0x0207,
		};

		enum class AttribMask
		{
			GL_CURRENT_BIT = 0x00000001,
			GL_POINT_BIT = 0x00000002,
			GL_LINE_BIT = 0x00000004,
			GL_POLYGON_BIT = 0x00000008,
			GL_POLYGON_STIPPLE_BIT = 0x00000010,
			GL_PIXEL_MODE_BIT = 0x00000020,
			GL_LIGHTING_BIT = 0x00000040,
			GL_FOG_BIT = 0x00000080,
			GL_DEPTH_BUFFER_BIT = 0x00000100,
			GL_ACCUM_BUFFER_BIT = 0x00000200,
			GL_STENCIL_BUFFER_BIT = 0x00000400,
			GL_VIEWPORT_BIT = 0x00000800,
			GL_TRANSFORM_BIT = 0x00001000,
			GL_ENABLE_BIT = 0x00002000,
			GL_COLOR_BUFFER_BIT = 0x00004000,
			GL_HINT_BIT = 0x00008000,
			GL_EVAL_BIT = 0x00010000,
			GL_LIST_BIT = 0x00020000,
			GL_TEXTURE_BIT = 0x00040000,
			GL_SCISSOR_BIT = 0x00080000,
			GL_ALL_ATTRIB_BITS = 0x000fffff,
		};

		enum class BeginMode
		{
			GL_POINTS = 0x0000,
			GL_LINES = 0x0001,
			GL_LINE_LOOP = 0x0002,
			GL_LINE_STRIP = 0x0003,
			GL_TRIANGLES = 0x0004,
			GL_TRIANGLE_STRIP = 0x0005,
			GL_TRIANGLE_FAN = 0x0006,
			GL_QUADS = 0x0007,
			GL_QUAD_STRIP = 0x0008,
			GL_POLYGON = 0x0009,
		};

		enum class BlendingFactorDest
		{
			GL_ZERO = 0,
			GL_ONE = 1,
			GL_SRC_COLOR = 0x0300,
			GL_ONE_MINUS_SRC_COLOR = 0x0301,
			GL_SRC_ALPHA = 0x0302,
			GL_ONE_MINUS_SRC_ALPHA = 0x0303,
			GL_DST_ALPHA = 0x0304,
			GL_ONE_MINUS_DST_ALPHA = 0x0305,
		};

		enum class BlendingFactorSrc
		{
			//GL_ZERO = 0,
			//GL_ONE = 1,
			GL_DST_COLOR = 0x0306,
			GL_ONE_MINUS_DST_COLOR = 0x0307,
			GL_SRC_ALPHA_SATURATE = 0x0308,
			//GL_ONE_MINUS_SRC_ALPHA = 0x0303,
			//GL_DST_ALPHA = 0x0304,
			//GL_ONE_MINUS_DST_ALPHA = 0x0305,
		};

		enum class ClearBufferMask
		{
			//	GL_COLOR_BUFFER_BIT,
			//	GL_ACCUM_BUFFER_BIT,
			//	GL_STENCIL_BUFFER_BIT,
			//	GL_DEPTH_BUFFER_BIT,
		};

		enum class ClientArrayType
		{
			//	GL_VERTEX_ARRAY,
			//	GL_NORMAL_ARRAY,
			//	GL_COLOR_ARRAY,
			//	GL_INDEX_ARRAY,
			//	GL_TEXTURE_COORD_ARRAY,
			//	GL_EDGE_FLAG_ARRAY,
		};

		enum class ClipPlaneName
		{
			GL_CLIP_PLANE0 = 0x3000,
			GL_CLIP_PLANE1 = 0x3001,
			GL_CLIP_PLANE2 = 0x3002,
			GL_CLIP_PLANE3 = 0x3003,
			GL_CLIP_PLANE4 = 0x3004,
			GL_CLIP_PLANE5 = 0x3005,
		};

		enum class ColorMaterialFace
		{
			//	GL_FRONT,
			//	GL_BACK,
			//	GL_FRONT_AND_BACK,
		};

		enum class ColorMaterialParameter
		{
			//	GL_AMBIENT,
			//	GL_DIFFUSE,
			//	GL_SPECULAR,
			//	GL_EMISSION,
			//	GL_AMBIENT_AND_DIFFUSE,
		};

		enum class ColorPointerType
		{
			//	GL_BYTE,
			//	GL_UNSIGNED_BYTE,
			//	GL_SHORT,
			//	GL_UNSIGNED_SHORT,
			//	GL_INT,
			//	GL_UNSIGNED_INT,
			//	GL_FLOAT,
			//	GL_DOUBLE,
		};

		enum class CullFaceMode
		{
			//	GL_FRONT,
			//	GL_BACK,
			//	GL_FRONT_AND_BACK,
		};

		enum class DataType
		{
			//	GL_BYTE = 0x1400,
			//	GL_UNSIGNED_BYTE = 0x1401,
			//	GL_SHORT = 0x1402,
			//	GL_UNSIGNED_SHORT = 0x1403,
			//	GL_INT = 0x1404,
			//	GL_UNSIGNED_INT = 0x1405,
			//	GL_FLOAT = 0x1406,
			//	GL_2_BYTES = 0x1407,
			//	GL_3_BYTES = 0x1408,
			//	GL_4_BYTES = 0x1409,
			//	GL_DOUBLE = 0x140A,
		};

		enum class DepthFunction
		{
			//	GL_NEVER,
			//	GL_LESS,
			//	GL_EQUAL,
			//	GL_LEQUAL,
			//	GL_GREATER,
			//	GL_NOTEQUAL,
			//	GL_GEQUAL,
			//	GL_ALWAYS,
		};

		enum class DrawBufferMode
		{
			GL_NONE = 0,
			GL_FRONT_LEFT = 0x0400,
			GL_FRONT_RIGHT = 0x0401,
			GL_BACK_LEFT = 0x0402,
			GL_BACK_RIGHT = 0x0403,
			GL_FRONT = 0x0404,
			GL_BACK = 0x0405,
			GL_LEFT = 0x0406,
			GL_RIGHT = 0x0407,
			GL_FRONT_AND_BACK = 0x0408,
			GL_AUX0 = 0x0409,
			GL_AUX1 = 0x040A,
			GL_AUX2 = 0x040B,
			GL_AUX3 = 0x040C,
		};

		enum class Enable
		{
			//	GL_FOG,
			//	GL_LIGHTING,
			//	GL_TEXTURE_1D,
			//	GL_TEXTURE_2D,
			//	GL_LINE_STIPPLE,
			//	GL_POLYGON_STIPPLE,
			//	GL_CULL_FACE,
			//	GL_ALPHA_TEST,
			//	GL_BLEND,
			//	GL_INDEX_LOGIC_OP,
			//	GL_COLOR_LOGIC_OP,
			//	GL_DITHER,
			//	GL_STENCIL_TEST,
			//	GL_DEPTH_TEST,
			//	GL_CLIP_PLANE0,
			//	GL_CLIP_PLANE1,
			//	GL_CLIP_PLANE2,
			//	GL_CLIP_PLANE3,
			//	GL_CLIP_PLANE4,
			//	GL_CLIP_PLANE5,
			//	GL_LIGHT0,
			//	GL_LIGHT1,
			//	GL_LIGHT2,
			//	GL_LIGHT3,
			//	GL_LIGHT4,
			//	GL_LIGHT5,
			//	GL_LIGHT6,
			//	GL_LIGHT7,
			//	GL_TEXTURE_GEN_S,
			//	GL_TEXTURE_GEN_T,
			//	GL_TEXTURE_GEN_R,
			//	GL_TEXTURE_GEN_Q,
			//	GL_MAP1_VERTEX_3,
			//	GL_MAP1_VERTEX_4,
			//	GL_MAP1_COLOR_4,
			//	GL_MAP1_INDEX,
			//	GL_MAP1_NORMAL,
			//	GL_MAP1_TEXTURE_COORD_1,
			//	GL_MAP1_TEXTURE_COORD_2,
			//	GL_MAP1_TEXTURE_COORD_3,
			//	GL_MAP1_TEXTURE_COORD_4,
			//	GL_MAP2_VERTEX_3,
			//	GL_MAP2_VERTEX_4,
			//	GL_MAP2_COLOR_4,
			//	GL_MAP2_INDEX,
			//	GL_MAP2_NORMAL,
			//	GL_MAP2_TEXTURE_COORD_1,
			//	GL_MAP2_TEXTURE_COORD_2,
			//	GL_MAP2_TEXTURE_COORD_3,
			//	GL_MAP2_TEXTURE_COORD_4,
			//	GL_POINT_SMOOTH,
			//	GL_LINE_SMOOTH,
			//	GL_POLYGON_SMOOTH,
			//	GL_SCISSOR_TEST,
			//	GL_COLOR_MATERIAL,
			//	GL_NORMALIZE,
			//	GL_AUTO_NORMAL,
			//	GL_VERTEX_ARRAY,
			//	GL_NORMAL_ARRAY,
			//	GL_COLOR_ARRAY,
			//	GL_INDEX_ARRAY,
			//	GL_TEXTURE_COORD_ARRAY,
			//	GL_EDGE_FLAG_ARRAY,
			//	GL_POLYGON_OFFSET_POINT,
			//	GL_POLYGON_OFFSET_LINE,
			//	GL_POLYGON_OFFSET_FILL,
		};

		enum class ErrorCode
		{
			GL_NO_ERROR = 0,
			GL_INVALID_ENUM = 0x0500,
			GL_INVALID_VALUE = 0x0501,
			GL_INVALID_OPERATION = 0x0502,
			GL_STACK_OVERFLOW = 0x0503,
			GL_STACK_UNDERFLOW = 0x0504,
			GL_OUT_OF_MEMORY = 0x0505,
		};

		enum class FeedBackMode
		{
			GL_2D = 0x0600,
			GL_3D = 0x0601,
			GL_3D_COLOR = 0x0602,
			GL_3D_COLOR_TEXTURE = 0x0603,
			GL_4D_COLOR_TEXTURE = 0x0603,
		};

		enum class FeedBackToken
		{
			GL_PASS_THROUGH_TOKEN = 0x0700,
			GL_POINT_TOKEN = 0x0701,
			GL_LINE_TOKEN = 0x0702,
			GL_POLYGON_TOKEN = 0x0703,
			GL_BITMAP_TOKEN = 0x0704,
			GL_DRAW_PIXEL_TOKEN = 0x0705,
			GL_COPY_PIXEL_TOKEN = 0x0706,
			GL_LINE_RESET_TOKEN = 0x0707,
		};

		enum class FogMode
		{
			//GL_LINEAR,
			GL_EXP = 0x0800,
			GL_EXP2 = 0x0801,
		};

		enum class FogParameter
		{
			//	GL_FOG_COLOR,
			//	GL_FOG_DENSITY,
			//	GL_FOG_END,
			//	GL_FOG_INDEX,
			//	GL_FOG_MODE,
			//	GL_FOG_START,
		};

		enum class FrontFaceDirection
		{
			GL_CW = 0x0900,
			GL_CCW = 0x0901,
		};

		enum class GetMapTarget
		{
			GL_COEFF = 0x0A00,
			GL_ORDER = 0x0A01,
			GL_DOMAIN = 0x0A02,
		};

		enum class GetPixelMap
		{
			//	GL_PIXEL_MAP_I_TO_I,
			//	GL_PIXEL_MAP_S_TO_S,
			//	GL_PIXEL_MAP_I_TO_R,
			//	GL_PIXEL_MAP_I_TO_G,
			//	GL_PIXEL_MAP_I_TO_B,
			//	GL_PIXEL_MAP_I_TO_A,
			//	GL_PIXEL_MAP_R_TO_R,
			//	GL_PIXEL_MAP_G_TO_G,
			//	GL_PIXEL_MAP_B_TO_B,
			//	GL_PIXEL_MAP_A_TO_A,
		};

		enum class GetPointerTarget
		{
			//	GL_VERTEX_ARRAY_POINTER,
			//	GL_NORMAL_ARRAY_POINTER,
			//	GL_COLOR_ARRAY_POINTER,
			//	GL_INDEX_ARRAY_POINTER,
			//	GL_TEXTURE_COORD_ARRAY_POINTER,
			//	GL_EDGE_FLAG_ARRAY_POINTER,
		};

		enum class GetTarget
		{
			GL_CURRENT_COLOR = 0x0B00,
			GL_CURRENT_INDEX = 0x0B01,
			GL_CURRENT_NORMAL = 0x0B02,
			GL_CURRENT_TEXTURE_COORDS = 0x0B03,
			GL_CURRENT_RASTER_COLOR = 0x0B04,
			GL_CURRENT_RASTER_INDEX = 0x0B05,
			GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06,
			GL_CURRENT_RASTER_POSITION = 0x0B07,
			GL_CURRENT_RASTER_POSITION_VALID = 0x0B08,
			GL_CURRENT_RASTER_DISTANCE = 0x0B09,
			GL_POINT_SMOOTH = 0x0B10,
			GL_POINT_SIZE = 0x0B11,
			GL_POINT_SIZE_RANGE = 0x0B12,
			GL_POINT_SIZE_GRANULARITY = 0x0B13,
			GL_LINE_SMOOTH = 0x0B20,
			GL_LINE_WIDTH = 0x0B21,
			GL_LINE_WIDTH_RANGE = 0x0B22,
			GL_LINE_WIDTH_GRANULARITY = 0x0B23,
			GL_LINE_STIPPLE = 0x0B24,
			GL_LINE_STIPPLE_PATTERN = 0x0B25,
			GL_LINE_STIPPLE_REPEAT = 0x0B26,
			GL_LIST_MODE = 0x0B30,
			GL_MAX_LIST_NESTING = 0x0B31,
			GL_LIST_BASE = 0x0B32,
			GL_LIST_INDEX = 0x0B33,
			GL_POLYGON_MODE = 0x0B40,
			GL_POLYGON_SMOOTH = 0x0B41,
			GL_POLYGON_STIPPLE = 0x0B42,
			GL_EDGE_FLAG = 0x0B43,
			GL_CULL_FACE = 0x0B44,
			GL_CULL_FACE_MODE = 0x0B45,
			GL_FRONT_FACE = 0x0B46,
			GL_LIGHTING = 0x0B50,
			GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51,
			GL_LIGHT_MODEL_TWO_SIDE = 0x0B52,
			GL_LIGHT_MODEL_AMBIENT = 0x0B53,
			GL_SHADE_MODEL = 0x0B54,
			GL_COLOR_MATERIAL_FACE = 0x0B55,
			GL_COLOR_MATERIAL_PARAMETER = 0x0B56,
			GL_COLOR_MATERIAL = 0x0B57,
			GL_FOG = 0x0B60,
			GL_FOG_INDEX = 0x0B61,
			GL_FOG_DENSITY = 0x0B62,
			GL_FOG_START = 0x0B63,
			GL_FOG_END = 0x0B64,
			GL_FOG_MODE = 0x0B65,
			GL_FOG_COLOR = 0x0B66,
			GL_DEPTH_RANGE = 0x0B70,
			GL_DEPTH_TEST = 0x0B71,
			GL_DEPTH_WRITEMASK = 0x0B72,
			GL_DEPTH_CLEAR_VALUE = 0x0B73,
			GL_DEPTH_FUNC = 0x0B74,
			GL_ACCUM_CLEAR_VALUE = 0x0B80,
			GL_STENCIL_TEST = 0x0B90,
			GL_STENCIL_CLEAR_VALUE = 0x0B91,
			GL_STENCIL_FUNC = 0x0B92,
			GL_STENCIL_VALUE_MASK = 0x0B93,
			GL_STENCIL_FAIL = 0x0B94,
			GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95,
			GL_STENCIL_PASS_DEPTH_PASS = 0x0B96,
			GL_STENCIL_REF = 0x0B97,
			GL_STENCIL_WRITEMASK = 0x0B98,
			GL_MATRIX_MODE = 0x0BA0,
			GL_NORMALIZE = 0x0BA1,
			GL_VIEWPORT = 0x0BA2,
			GL_MODELVIEW_STACK_DEPTH = 0x0BA3,
			GL_PROJECTION_STACK_DEPTH = 0x0BA4,
			GL_TEXTURE_STACK_DEPTH = 0x0BA5,
			GL_MODELVIEW_MATRIX = 0x0BA6,
			GL_PROJECTION_MATRIX = 0x0BA7,
			GL_TEXTURE_MATRIX = 0x0BA8,
			GL_ATTRIB_STACK_DEPTH = 0x0BB0,
			GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1,
			GL_ALPHA_TEST = 0x0BC0,
			GL_ALPHA_TEST_FUNC = 0x0BC1,
			GL_ALPHA_TEST_REF = 0x0BC2,
			GL_DITHER = 0x0BD0,
			GL_BLEND_DST = 0x0BE0,
			GL_BLEND_SRC = 0x0BE1,
			GL_BLEND = 0x0BE2,
			GL_LOGIC_OP_MODE = 0x0BF0,
			GL_INDEX_LOGIC_OP = 0x0BF1,
			GL_COLOR_LOGIC_OP = 0x0BF2,
			GL_AUX_BUFFERS = 0x0C00,
			GL_DRAW_BUFFER = 0x0C01,
			GL_READ_BUFFER = 0x0C02,
			GL_SCISSOR_BOX = 0x0C10,
			GL_SCISSOR_TEST = 0x0C11,
			GL_INDEX_CLEAR_VALUE = 0x0C20,
			GL_INDEX_WRITEMASK = 0x0C21,
			GL_COLOR_CLEAR_VALUE = 0x0C22,
			GL_COLOR_WRITEMASK = 0x0C23,
			GL_INDEX_MODE = 0x0C30,
			GL_RGBA_MODE = 0x0C31,
			GL_DOUBLEBUFFER = 0x0C32,
			GL_STEREO = 0x0C33,
			GL_RENDER_MODE = 0x0C40,
			GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50,
			GL_POINT_SMOOTH_HINT = 0x0C51,
			GL_LINE_SMOOTH_HINT = 0x0C52,
			GL_POLYGON_SMOOTH_HINT = 0x0C53,
			GL_FOG_HINT = 0x0C54,
			GL_TEXTURE_GEN_S = 0x0C60,
			GL_TEXTURE_GEN_T = 0x0C61,
			GL_TEXTURE_GEN_R = 0x0C62,
			GL_TEXTURE_GEN_Q = 0x0C63,
			GL_PIXEL_MAP_I_TO_I = 0x0C70,
			GL_PIXEL_MAP_S_TO_S = 0x0C71,
			GL_PIXEL_MAP_I_TO_R = 0x0C72,
			GL_PIXEL_MAP_I_TO_G = 0x0C73,
			GL_PIXEL_MAP_I_TO_B = 0x0C74,
			GL_PIXEL_MAP_I_TO_A = 0x0C75,
			GL_PIXEL_MAP_R_TO_R = 0x0C76,
			GL_PIXEL_MAP_G_TO_G = 0x0C77,
			GL_PIXEL_MAP_B_TO_B = 0x0C78,
			GL_PIXEL_MAP_A_TO_A = 0x0C79,
			GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0,
			GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1,
			GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2,
			GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3,
			GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4,
			GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5,
			GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6,
			GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7,
			GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8,
			GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9,
			GL_UNPACK_SWAP_BYTES = 0x0CF0,
			GL_UNPACK_LSB_FIRST = 0x0CF1,
			GL_UNPACK_ROW_LENGTH = 0x0CF2,
			GL_UNPACK_SKIP_ROWS = 0x0CF3,
			GL_UNPACK_SKIP_PIXELS = 0x0CF4,
			GL_UNPACK_ALIGNMENT = 0x0CF5,
			GL_PACK_SWAP_BYTES = 0x0D00,
			GL_PACK_LSB_FIRST = 0x0D01,
			GL_PACK_ROW_LENGTH = 0x0D02,
			GL_PACK_SKIP_ROWS = 0x0D03,
			GL_PACK_SKIP_PIXELS = 0x0D04,
			GL_PACK_ALIGNMENT = 0x0D05,
			GL_MAP_COLOR = 0x0D10,
			GL_MAP_STENCIL = 0x0D11,
			GL_INDEX_SHIFT = 0x0D12,
			GL_INDEX_OFFSET = 0x0D13,
			GL_RED_SCALE = 0x0D14,
			GL_RED_BIAS = 0x0D15,
			GL_ZOOM_X = 0x0D16,
			GL_ZOOM_Y = 0x0D17,
			GL_GREEN_SCALE = 0x0D18,
			GL_GREEN_BIAS = 0x0D19,
			GL_BLUE_SCALE = 0x0D1A,
			GL_BLUE_BIAS = 0x0D1B,
			GL_ALPHA_SCALE = 0x0D1C,
			GL_ALPHA_BIAS = 0x0D1D,
			GL_DEPTH_SCALE = 0x0D1E,
			GL_DEPTH_BIAS = 0x0D1F,
			GL_MAX_EVAL_ORDER = 0x0D30,
			GL_MAX_LIGHTS = 0x0D31,
			GL_MAX_CLIP_PLANES = 0x0D32,
			GL_MAX_TEXTURE_SIZE = 0x0D33,
			GL_MAX_PIXEL_MAP_TABLE = 0x0D34,
			GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35,
			GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36,
			GL_MAX_NAME_STACK_DEPTH = 0x0D37,
			GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38,
			GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39,
			GL_MAX_VIEWPORT_DIMS = 0x0D3A,
			GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B,
			GL_SUBPIXEL_BITS = 0x0D50,
			GL_INDEX_BITS = 0x0D51,
			GL_RED_BITS = 0x0D52,
			GL_GREEN_BITS = 0x0D53,
			GL_BLUE_BITS = 0x0D54,
			GL_ALPHA_BITS = 0x0D55,
			GL_DEPTH_BITS = 0x0D56,
			GL_STENCIL_BITS = 0x0D57,
			GL_ACCUM_RED_BITS = 0x0D58,
			GL_ACCUM_GREEN_BITS = 0x0D59,
			GL_ACCUM_BLUE_BITS = 0x0D5A,
			GL_ACCUM_ALPHA_BITS = 0x0D5B,
			GL_NAME_STACK_DEPTH = 0x0D70,
			GL_AUTO_NORMAL = 0x0D80,
			GL_MAP1_COLOR_4 = 0x0D90,
			GL_MAP1_INDEX = 0x0D91,
			GL_MAP1_NORMAL = 0x0D92,
			GL_MAP1_TEXTURE_COORD_1 = 0x0D93,
			GL_MAP1_TEXTURE_COORD_2 = 0x0D94,
			GL_MAP1_TEXTURE_COORD_3 = 0x0D95,
			GL_MAP1_TEXTURE_COORD_4 = 0x0D96,
			GL_MAP1_VERTEX_3 = 0x0D97,
			GL_MAP1_VERTEX_4 = 0x0D98,
			GL_MAP2_COLOR_4 = 0x0DB0,
			GL_MAP2_INDEX = 0x0DB1,
			GL_MAP2_NORMAL = 0x0DB2,
			GL_MAP2_TEXTURE_COORD_1 = 0x0DB3,
			GL_MAP2_TEXTURE_COORD_2 = 0x0DB4,
			GL_MAP2_TEXTURE_COORD_3 = 0x0DB5,
			GL_MAP2_TEXTURE_COORD_4 = 0x0DB6,
			GL_MAP2_VERTEX_3 = 0x0DB7,
			GL_MAP2_VERTEX_4 = 0x0DB8,
			GL_MAP1_GRID_DOMAIN = 0x0DD0,
			GL_MAP1_GRID_SEGMENTS = 0x0DD1,
			GL_MAP2_GRID_DOMAIN = 0x0DD2,
			GL_MAP2_GRID_SEGMENTS = 0x0DD3,
			GL_TEXTURE_1D = 0x0DE0,
			GL_TEXTURE_2D = 0x0DE1,
			GL_FEEDBACK_BUFFER_POINTER = 0x0DF0,
			GL_FEEDBACK_BUFFER_SIZE = 0x0DF1,
			GL_FEEDBACK_BUFFER_TYPE = 0x0DF2,
			GL_SELECTION_BUFFER_POINTER = 0x0DF3,
			GL_SELECTION_BUFFER_SIZE = 0x0DF4,
			//GL_TEXTURE_BINDING_1D,
			//GL_TEXTURE_BINDING_2D,
			//GL_VERTEX_ARRAY,
			//GL_NORMAL_ARRAY,
			//GL_COLOR_ARRAY,
			//GL_INDEX_ARRAY,
			//GL_TEXTURE_COORD_ARRAY,
			//GL_EDGE_FLAG_ARRAY,
			//GL_VERTEX_ARRAY_SIZE,
			//GL_VERTEX_ARRAY_TYPE,
			//GL_VERTEX_ARRAY_STRIDE,
			//GL_NORMAL_ARRAY_TYPE,
			//GL_NORMAL_ARRAY_STRIDE,
			//GL_COLOR_ARRAY_SIZE,
			//GL_COLOR_ARRAY_TYPE,
			//GL_COLOR_ARRAY_STRIDE,
			//GL_INDEX_ARRAY_TYPE,
			//GL_INDEX_ARRAY_STRIDE,
			//GL_TEXTURE_COORD_ARRAY_SIZE,
			//GL_TEXTURE_COORD_ARRAY_TYPE,
			//GL_TEXTURE_COORD_ARRAY_STRIDE,
			//GL_EDGE_FLAG_ARRAY_STRIDE,
			//GL_POLYGON_OFFSET_FACTOR,
			//GL_POLYGON_OFFSET_UNITS,
		};

		enum class GetTextureParameter
		{
			//GL_TEXTURE_MAG_FILTER,
			//GL_TEXTURE_MIN_FILTER,
			//GL_TEXTURE_WRAP_S,
			//GL_TEXTURE_WRAP_T,
			GL_TEXTURE_WIDTH = 0x1000,
			GL_TEXTURE_HEIGHT = 0x1001,
			GL_TEXTURE_INTERNAL_FORMAT = 0x1003,
			GL_TEXTURE_BORDER_COLOR = 0x1004,
			GL_TEXTURE_BORDER = 0x1005,
			//GL_TEXTURE_RED_SIZE,
			//GL_TEXTURE_GREEN_SIZE,
			//GL_TEXTURE_BLUE_SIZE,
			//GL_TEXTURE_ALPHA_SIZE,
			//GL_TEXTURE_LUMINANCE_SIZE,
			//GL_TEXTURE_INTENSITY_SIZE,
			//GL_TEXTURE_PRIORITY,
			//GL_TEXTURE_RESIDENT,
		};

		enum class HintMode
		{
			GL_DONT_CARE = 0x1100,
			GL_FASTEST = 0x1101,
			GL_NICEST = 0x1102,
		};

		enum class HintTarget
		{
			//	GL_PERSPECTIVE_CORRECTION_HINT,
			//	GL_POINT_SMOOTH_HINT,
			//	GL_LINE_SMOOTH_HINT,
			//	GL_POLYGON_SMOOTH_HINT,
			//	GL_FOG_HINT,
			//	GL_PHONG_HINT,
		};

		enum class IndexPointerType
		{
			//	GL_SHORT,
			//	GL_INT,
			//	GL_FLOAT,
			//	GL_DOUBLE,
		};

		enum class LightModelParameter
		{
			//	GL_LIGHT_MODEL_AMBIENT,
			//	GL_LIGHT_MODEL_LOCAL_VIEWER,
			//	GL_LIGHT_MODEL_TWO_SIDE,
		};

		enum class LightName
		{
			GL_LIGHT0 = 0x4000,
			GL_LIGHT1 = 0x4001,
			GL_LIGHT2 = 0x4002,
			GL_LIGHT3 = 0x4003,
			GL_LIGHT4 = 0x4004,
			GL_LIGHT5 = 0x4005,
			GL_LIGHT6 = 0x4006,
			GL_LIGHT7 = 0x4007,
		};

		enum class LightParameter
		{
			GL_AMBIENT = 0x1200,
			GL_DIFFUSE = 0x1201,
			GL_SPECULAR = 0x1202,
			GL_POSITION = 0x1203,
			GL_SPOT_DIRECTION = 0x1204,
			GL_SPOT_EXPONENT = 0x1205,
			GL_SPOT_CUTOFF = 0x1206,
			GL_CONSTANT_ATTENUATION = 0x1207,
			GL_LINEAR_ATTENUATION = 0x1208,
			GL_QUADRATIC_ATTENUATION = 0x1209,
		};

		enum class InterleavedArrays
		{
			//	GL_V2F,
			//	GL_V3F,
			//	GL_C4UB_V2F,
			//	GL_C4UB_V3F,
			//	GL_C3F_V3F,
			//	GL_N3F_V3F,
			//	GL_C4F_N3F_V3F,
			//	GL_T2F_V3F,
			//	GL_T4F_V4F,
			//	GL_T2F_C4UB_V3F,
			//	GL_T2F_C3F_V3F,
			//	GL_T2F_N3F_V3F,
			//	GL_T2F_C4F_N3F_V3F,
			//	GL_T4F_C4F_N3F_V4F,
		};

		enum class ListMode
		{
			GL_COMPILE = 0x1300,
			GL_COMPILE_AND_EXECUTE = 0x1301,
		};

		enum class ListNameType
		{
			//	GL_BYTE,
			//	GL_UNSIGNED_BYTE,
			//	GL_SHORT,
			//	GL_UNSIGNED_SHORT,
			//	GL_INT,
			//	GL_UNSIGNED_INT,
			//	GL_FLOAT,
			//	GL_2_BYTES,
			//	GL_3_BYTES,
			//	GL_4_BYTES,
		};

		enum class LogicOp
		{
			GL_CLEAR = 0x1500,
			GL_AND = 0x1501,
			GL_AND_REVERSE = 0x1502,
			GL_COPY = 0x1503,
			GL_AND_INVERTED = 0x1504,
			GL_NOOP = 0x1505,
			GL_XOR = 0x1506,
			GL_OR = 0x1507,
			GL_NOR = 0x1508,
			GL_EQUIV = 0x1509,
			GL_INVERT = 0x150A,
			GL_OR_REVERSE = 0x150B,
			GL_COPY_INVERTED = 0x150C,
			GL_OR_INVERTED = 0x150D,
			GL_NAND = 0x150E,
			GL_SET = 0x150F,
		};

		enum class MapTarget
		{
			//	GL_MAP1_COLOR_4,
			//	GL_MAP1_INDEX,
			//	GL_MAP1_NORMAL,
			//	GL_MAP1_TEXTURE_COORD_1,
			//	GL_MAP1_TEXTURE_COORD_2,
			//	GL_MAP1_TEXTURE_COORD_3,
			//	GL_MAP1_TEXTURE_COORD_4,
			//	GL_MAP1_VERTEX_3,
			//	GL_MAP1_VERTEX_4,
			//	GL_MAP2_COLOR_4,
			//	GL_MAP2_INDEX,
			//	GL_MAP2_NORMAL,
			//	GL_MAP2_TEXTURE_COORD_1,
			//	GL_MAP2_TEXTURE_COORD_2,
			//	GL_MAP2_TEXTURE_COORD_3,
			//	GL_MAP2_TEXTURE_COORD_4,
			//	GL_MAP2_VERTEX_3,
			//	GL_MAP2_VERTEX_4,
		};

		enum class MaterialFace
		{
			//	GL_FRONT,
			//	GL_BACK,
			//	GL_FRONT_AND_BACK,
		};

		enum class MaterialParameter
		{
			GL_EMISSION = 0x1600,
			GL_SHININESS = 0x1601,
			GL_AMBIENT_AND_DIFFUSE = 0x1602,
			GL_COLOR_INDEXES = 0x1603,
			//GL_AMBIENT,
			//GL_DIFFUSE,
			//GL_SPECULAR,
		};

		enum class MatrixMode
		{
			GL_MODELVIEW = 0x1700,
			GL_PROJECTION = 0x1701,
			GL_TEXTURE = 0x1702,
		};

		enum class MeshMode1
		{
			//	GL_POINT,
			//	GL_LINE,
		};

		enum class MeshMode2
		{
			//	GL_POINT,
			//	GL_LINE,
			//  GL_FILL,
		};

		enum class NormalPointerType
		{
			//	GL_BYTE,
			//	GL_SHORT,
			//	GL_INT,
			//	GL_FLOAT,
			//	GL_DOUBLE,
		};

		enum class PixelCopyType
		{
			GL_COLOR = 0x1800,
			GL_DEPTH = 0x1801,
			GL_STENCIL = 0x1802,
		};

		enum class PixelFormat
		{
			GL_COLOR_INDEX = 0x1900,
			GL_STENCIL_INDEX = 0x1901,
			GL_DEPTH_COMPONENT = 0x1902,
			GL_RED = 0x1903,
			GL_GREEN = 0x1904,
			GL_BLUE = 0x1905,
			GL_ALPHA = 0x1906,
			GL_RGB = 0x1907,
			GL_RGBA = 0x1908,
			GL_LUMINANCE = 0x1909,
			GL_LUMINANCE_ALPHA = 0x190A,
		};

		enum class PixelMap
		{
			//	GL_PIXEL_MAP_I_TO_I,
			//	GL_PIXEL_MAP_S_TO_S,
			//	GL_PIXEL_MAP_I_TO_R,
			//	GL_PIXEL_MAP_I_TO_G,
			//	GL_PIXEL_MAP_I_TO_B,
			//	GL_PIXEL_MAP_I_TO_A,
			//	GL_PIXEL_MAP_R_TO_R,
			//	GL_PIXEL_MAP_G_TO_G,
			//	GL_PIXEL_MAP_B_TO_B,
			//	GL_PIXEL_MAP_A_TO_A,
		};

		enum class PixelStore
		{
			//	GL_UNPACK_SWAP_BYTES,
			//	GL_UNPACK_LSB_FIRST,
			//	GL_UNPACK_ROW_LENGTH,
			//	GL_UNPACK_SKIP_ROWS,
			//	GL_UNPACK_SKIP_PIXELS,
			//	GL_UNPACK_ALIGNMENT,
			//	GL_PACK_SWAP_BYTES,
			//	GL_PACK_LSB_FIRST,
			//	GL_PACK_ROW_LENGTH,
			//	GL_PACK_SKIP_ROWS,
			//	GL_PACK_SKIP_PIXELS,
			//	GL_PACK_ALIGNMENT,
		};

		enum class PixelTransfer
		{
			//	GL_MAP_COLOR,
			//	GL_MAP_STENCIL,
			//	GL_INDEX_SHIFT,
			//	GL_INDEX_OFFSET,
			//	GL_RED_SCALE,
			//	GL_RED_BIAS,
			//	GL_GREEN_SCALE,
			//	GL_GREEN_BIAS,
			//	GL_BLUE_SCALE,
			//	GL_BLUE_BIAS,
			//	GL_ALPHA_SCALE,
			//	GL_ALPHA_BIAS,
			//	GL_DEPTH_SCALE,
			//	GL_DEPTH_BIAS,
		};

		enum class PixelType
		{
			GL_BITMAP = 0x1A00,
			//GL_BYTE,
			//GL_UNSIGNED_BYTE,
			//GL_SHORT,
			//GL_UNSIGNED_SHORT,
			//GL_INT,
			//GL_UNSIGNED_INT,
			//GL_FLOAT,
		};

		enum class PolygonMode
		{
			GL_POINT = 0x1B00,
			GL_LINE = 0x1B01,
			GL_FILL = 0x1B02,
		};

		enum class ReadBufferMode
		{
			//	GL_FRONT_LEFT,
			//	GL_FRONT_RIGHT,
			//	GL_BACK_LEFT,
			//	GL_BACK_RIGHT,
			//	GL_FRONT,
			//	GL_BACK,
			//	GL_LEFT,
			//	GL_RIGHT,
			//	GL_AUX0,
			//	GL_AUX1,
			//	GL_AUX2,
			//	GL_AUX3,
		};

		enum class RenderingMode
		{
			GL_RENDER = 0x1C00,
			GL_FEEDBACK = 0x1C01,
			GL_SELECT = 0x1C02,
		};

		enum class ShadingModel
		{
			GL_FLAT = 0x1D00,
			GL_SMOOTH = 0x1D01,
		};

		enum class StencilFunction
		{
			//	GL_NEVER,
			//	GL_LESS,
			//	GL_EQUAL,
			//	GL_LEQUAL,
			//	GL_GREATER,
			//	GL_NOTEQUAL,
			//	GL_GEQUAL,
			//	GL_ALWAYS,
		};

		enum class StencilOp
		{
			//GL_ZERO,
			GL_KEEP = 0x1E00,
			GL_REPLACE = 0x1E01,
			GL_INCR = 0x1E02,
			GL_DECR = 0x1E03,
			//GL_INVERT,
		};

		enum class StringName
		{
			GL_VENDOR = 0x1F00,
			GL_RENDERER = 0x1F01,
			GL_VERSION = 0x1F02,
			GL_EXTENSIONS = 0x1F03,
		};

		enum class TextureCoordName
		{
			GL_S = 0x2000,
			GL_T = 0x2001,
			GL_R = 0x2002,
			GL_Q = 0x2003,
		};

		enum class TexCoordPointerType
		{
			//	GL_SHORT,
			//	GL_INT,
			//	GL_FLOAT,
			//	GL_DOUBLE,
		};

		enum class TextureEnvMode
		{
			GL_MODULATE = 0x2100,
			GL_DECAL = 0x2101,
			//GL_BLEND,
			//GL_REPLACE,
		};

		enum class TextureEnvParameter
		{
			GL_TEXTURE_ENV_MODE = 0x2200,
			GL_TEXTURE_ENV_COLOR = 0x2201,
		};

		enum class TextureEnvTarget
		{
			GL_TEXTURE_ENV = 0x2300,
		};

		enum class TextureGenMode
		{
			GL_EYE_LINEAR = 0x2400,
			GL_OBJECT_LINEAR = 0x2401,
			GL_SPHERE_MAP = 0x2402,
		};

		enum class TextureGenParameter
		{
			GL_TEXTURE_GEN_MODE = 0x2500,
			GL_OBJECT_PLANE = 0x2501,
			GL_EYE_PLANE = 0x2502,
		};

		enum class TextureMagFilter
		{
			GL_NEAREST = 0x2600,
			GL_LINEAR = 0x2601,
		};

		enum class TextureMinFilter
		{
			//GL_NEAREST,
			//GL_LINEAR,
			GL_NEAREST_MIPMAP_NEAREST = 0x2700,
			GL_LINEAR_MIPMAP_NEAREST = 0x2701,
			GL_NEAREST_MIPMAP_LINEAR = 0x2702,
			GL_LINEAR_MIPMAP_LINEAR = 0x2703,
		};

		enum class TextureParameterName
		{
			GL_TEXTURE_MAG_FILTER = 0x2800,
			GL_TEXTURE_MIN_FILTER = 0x2801,
			GL_TEXTURE_WRAP_S = 0x2802,
			GL_TEXTURE_WRAP_T = 0x2803,
			//GL_TEXTURE_BORDER_COLOR,
			//GL_TEXTURE_PRIORITY,
		};

		enum class TextureTarget
		{
			//	GL_TEXTURE_1D,
			//	GL_TEXTURE_2D,
			//	GL_PROXY_TEXTURE_1D,
			//	GL_PROXY_TEXTURE_2D,
		};

		enum class TextureWrapMode
		{
			GL_CLAMP = 0x2900,
			GL_REPEAT = 0x2901,
		};

		enum class VertexPointerType
		{
			//	GL_SHORT,
			//	GL_INT,
			//	GL_FLOAT,
			//	GL_DOUBLE,
		};

		enum class ClientAttribMask : uint32_t
		{
			GL_CLIENT_PIXEL_STORE_BIT = 0x00000001,
			GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002,
			GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffff,
		};

		virtual void Clear(AttribMask attribMask) = 0;
		virtual void SetClearColor(float r, float g, float b, float a) = 0;
		virtual void PushMatrix() = 0;
		virtual void SetMatrixMode(MatrixMode matrixMode) = 0;
		virtual void Translatef(float x, float y, float z) = 0;
		virtual void Scalef(float x, float y, float z) = 0;
		virtual void Rotatef(float angle, float x, float y, float z) = 0;
		virtual void PopMatrix() = 0;
		virtual void LoadIdentity() = 0;
		virtual void Begin(BeginMode beginMode) = 0;
		virtual void Color4f(float r, float g, float b, float a) = 0;
		virtual void Vertex3f(float x, float y, float z) = 0;
		virtual void TexCoord2f(float u, float v) = 0;
		virtual void End() = 0;
		virtual void Flush() = 0;
		virtual void SetViewport(int32_t x, int32_t y, uint32_t width, uint32_t height) = 0;
		virtual void Enable() = 0;
		virtual void GenTextures() = 0;
		virtual void DeleteTexture() = 0;
		virtual void BindTexture(uint32_t texture) = 0;
		virtual void TexParameteri() = 0;
		virtual void TexImage2D() = 0;


		//virtual void DrawArrays() = 0; // glDrawArrays()
	};
}
